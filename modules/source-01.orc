/*
 *  source-01.orc
 *
 *  Audio source module with two oscillators and a sub-oscillator.
 *
 *  The `poscil3` opcode is used for sine waves and the `vco2` opcode is used for other waveforms.
 */

{{DeclareModule 'source_01' 'hasAlwaysOnInstrument'}}


/// @internal
opcode _{{ModuleName}}_module_audio_generator, a, kkiV
    kAmp, kCps, iMode, kPulseWidth xin

    if (iMode == {{source_01.osc.wave.Sine}}) then
        aOut = poscil3(kAmp, kCps)
    else
        iVco2Mode = \
            iMode == {{source_01.osc.wave.Saw}} ? {{vco2.mode.Sawtooth}} : \
            iMode == {{source_01.osc.wave.Pulse}} ? {{vco2.mode.Square}} : \
            iMode == {{source_01.osc.wave.Triangle}} ? {{vco2.mode.SawtoothTriangleRamp}} : \
            -1
        aOut = vco2(kAmp, kCps, iVco2Mode, kPulseWidth)
    endif

    xout(aOut)
endop


/// Generates audio using two oscillators and a sub-oscillator.
/// The `poscil3` opcode is used for sine waves and the `vco2` opcode is used for other waveforms.
/// @param 1 Channel prefix used for host automation parameters.
/// @out Mono audio signal generated by the oscillators.
///
opcode AF_{{ModuleName}}_module, a, S
    SChannelPrefix xin
    i_channelIndex = {{hostValueGet}}:i(SChannelPrefix)

    aOut = 0

    if ({{moduleGet:k 'Enabled'}} == {{false}}) then
        kgoto end
    endif

    kHost_main_amp      = {{moduleGet:k 'MainAmp'}}

    kHost_enabled_1     = {{moduleGet:k 'Osc1Enabled'}}
    iHost_wave_1        = {{moduleGet:i 'Osc1Wave'}}
    kHost_pulseWidth_1  = {{moduleGet:k 'Osc1PulseWidth'}}
    kHost_fine_1        = {{moduleGet:k 'Osc1Fine'}}

    kHost_mix           = {{moduleGet:k 'OscMix'}}

    kHost_enabled_2     = {{moduleGet:k 'Osc2Enabled'}}
    iHost_wave_2        = {{moduleGet:i 'Osc2Wave'}}
    kHost_pulseWidth_2  = {{moduleGet:k 'Osc2PulseWidth'}}
    kHost_semi_2        = {{moduleGet:k 'Osc2Semi'}}
    kHost_fine_2        = {{moduleGet:k 'Osc2Fine'}}

    kHost_sub_enabled   = {{moduleGet:k 'SubEnabled'}}
    iHost_sub_wave      = {{moduleGet:i 'SubWave'}}
    kHost_sub_amp       = {{moduleGet:k 'SubAmp'}}

    kNoteNumber init notnum()

    if (kHost_enabled_1 == {{true}}) then
        kNoteNumber_1 = kNoteNumber + kHost_fine_1 / 100
        aOut += _source_01_module_audio_generator(kHost_mix, cpsmidinn(kNoteNumber_1), iHost_wave_1, kHost_pulseWidth_1)
    endif

    if (kHost_enabled_2 == {{true}}) then
        kNoteNumber_2 = kNoteNumber + kHost_semi_2 + kHost_fine_2 / 100
        aOut += _source_01_module_audio_generator(k(1) - kHost_mix, cpsmidinn(kNoteNumber_2), iHost_wave_2, kHost_pulseWidth_2)
    endif

    if (kHost_sub_enabled == {{true}}) then
        if (iHost_sub_wave == {{source_01.sub.wave.Pulse}}) then
            iMode_sub = {{vco2.mode.SquareWaveNoPWM}}
        elseif (iHost_sub_wave == {{source_01.sub.wave.Triangle}}) then
            iMode_sub = {{vco2.mode.TriangleNoRamp}}
        endif
        aOut += vco2(kHost_sub_amp, cpsmidinn(kNoteNumber - 12), iMode_sub)
    endif

end:
    xout(aOut * kHost_main_amp * 0.1)
endop


/// Always-on instrument for this module.
/// @param 4 Channel prefix used for host automation parameters. Should match the channel prefix used for the module's UDO.
///
instr AF_{{ModuleName}}_module_alwayson
    SChannelPrefix = p4

    kLast_wave_1        init 0
    kLast_wave_2        init 0
    kLast_pulseWidth_1  init 0
    kLast_pulseWidth_2  init 0
    kLast_fine_1        init 0
    kLast_fine_2        init 0

    i_channelIndex = {{hostValueGet}}:i(SChannelPrefix)

    if ({{moduleGet:k 'Osc2Link'}} == {{true}}) then
        kHost_wave_1        = {{moduleGet:k 'Osc1Wave'}}
        kHost_wave_2        = {{moduleGet:k 'Osc2Wave'}}
        kHost_pulseWidth_1  = {{moduleGet:k 'Osc1PulseWidth'}}
        kHost_pulseWidth_2  = {{moduleGet:k 'Osc2PulseWidth'}}
        kHost_fine_1        = {{moduleGet:k 'Osc1Fine'}}
        kHost_fine_2        = {{moduleGet:k 'Osc2Fine'}}

        if (kHost_wave_1 != kLast_wave_1) then
            kHost_wave_2 = kHost_wave_1
            {{moduleSet:k 'Osc2Wave' 'kHost_wave_2'}}
        elseif (kHost_wave_2 != kLast_wave_2) then
            kHost_wave_1 = kHost_wave_2
            {{moduleSet:k 'Osc1Wave' 'kHost_wave_1'}}
        endif

        if (kHost_pulseWidth_1 != kLast_pulseWidth_1) then
            kHost_pulseWidth_2 = kHost_pulseWidth_1
            {{moduleSet:k 'Osc2PulseWidth' 'kHost_pulseWidth_2'}}
        elseif (kHost_pulseWidth_2 != kLast_pulseWidth_2) then
            kHost_pulseWidth_1 = kHost_pulseWidth_2
            {{moduleSet:k 'Osc1PulseWidth' 'kHost_pulseWidth_1'}}
        endif

        if (kHost_fine_1 != kLast_fine_1) then
            kHost_fine_2 = -kHost_fine_1
            {{moduleSet:k 'Osc2Fine' 'kHost_fine_2'}}
        elseif (kHost_fine_2 != kLast_fine_2) then
            kHost_fine_1 = -kHost_fine_2
            {{moduleSet:k 'Osc1Fine' 'kHost_fine_1'}}
        endif

        kLast_wave_1 = kHost_wave_1
        kLast_wave_2 = kHost_wave_2
        kLast_pulseWidth_1 = kHost_pulseWidth_1
        kLast_pulseWidth_2 = kHost_pulseWidth_2
        kLast_fine_1 = kHost_fine_1
        kLast_fine_2 = kHost_fine_2
    endif
endin
