/*
 *  source-01.orc
 *
 *  Audio source module with two oscillators and a sub-oscillator.
 *
 *  The `poscil3` opcode is used for sine waves and the `vco2` opcode is used for other waveforms.
 */


gS_source_01_module_channels[][] init 1, {{eval '(Object.keys(constants.source_01.channel).length)'}}
gi_source_01_module_instance_count init 0

/// @internal
opcode _source_01_module_get, i, ii
    iInstanceIndex, iChannelIndex xin
    xout({{getHostValue}}:i(gS_source_01_module_channels[iInstanceIndex][iChannelIndex - 1]))
endop

/// @internal
opcode _source_01_module_get, k, ii
    iInstanceIndex, iChannelIndex xin
    xout({{getHostValue}}:k(gS_source_01_module_channels[iInstanceIndex][iChannelIndex - 1]))
endop

/// @internal
opcode _source_01_module_set, 0, iik
    iInstanceIndex, iChannelIndex, kValue xin
    {{setHostValue}}(gS_source_01_module_channels[iInstanceIndex][iChannelIndex - 1], kValue)
endop

/// @internal
opcode _source_01_module_audio_generator, a, kkiV
    kAmp, kCps, iMode, kPulseWidth xin

    if (iMode == {{source_01.osc.wave.Sine}}) then
        aOut = poscil3(kAmp, kCps)
    else
        iVco2Mode = \
            iMode == {{source_01.osc.wave.Saw}} ? {{vco2.mode.Sawtooth}} : \
            iMode == {{source_01.osc.wave.Pulse}} ? {{vco2.mode.Square}} : \
            iMode == {{source_01.osc.wave.Triangle}} ? {{vco2.mode.SawtoothTriangleRamp}} : \
            -1
        aOut = vco2(kAmp, kCps, iVco2Mode, kPulseWidth)
        ; {{LogDebug_k '("kAmp = %f", kAmp)'}}
        ; {{LogDebug_k '("kNoteNumber_1 = %f", kNoteNumber_1)'}}
        ; {{LogDebug_i '("iVco2Mode = %f", iVco2Mode)'}}
        ; {{LogDebug_k '("kPulseWidth = %f", kPulseWidth)'}}
    endif

    xout(aOut)
endop


/// Generates audio using two oscillators and a sub-oscillator.
/// The `poscil3` opcode is used for sine waves and the `vco2` opcode is used for other waveforms.
/// @param 1 Channel prefix used for host automation parameters.
/// @out Mono audio signal generated by the oscillators.
///
opcode AF_source_01_module, a, S
    SChannelPrefix xin
    aOut = 0

    ii = {{getHostValue}}:i(SChannelPrefix)

    if (_source_01_module_get:k(ii, {{source_01.channel.Enabled}}) == {{false}}) then
        kgoto end
    endif

    kHost_main_amp      = _source_01_module_get:k(ii, {{source_01.channel.MainAmp}})

    kHost_enabled_1     = _source_01_module_get:k(ii, {{source_01.channel.Osc1Enabled}})
    iHost_wave_1        = _source_01_module_get:i(ii, {{source_01.channel.Osc1Wave}})
    kHost_pulseWidth_1  = _source_01_module_get:k(ii, {{source_01.channel.Osc1PulseWidth}})
    kHost_fine_1        = _source_01_module_get:k(ii, {{source_01.channel.Osc1Fine}})

    kHost_mix           = _source_01_module_get:k(ii, {{source_01.channel.OscMix}})

    kHost_enabled_2     = _source_01_module_get:k(ii, {{source_01.channel.Osc2Enabled}})
    iHost_wave_2        = _source_01_module_get:i(ii, {{source_01.channel.Osc2Wave}})
    kHost_pulseWidth_2  = _source_01_module_get:k(ii, {{source_01.channel.Osc2PulseWidth}})
    kHost_semi_2        = _source_01_module_get:k(ii, {{source_01.channel.Osc2Semi}})
    kHost_fine_2        = _source_01_module_get:k(ii, {{source_01.channel.Osc2Fine}})

    kHost_sub_enabled   = _source_01_module_get:k(ii, {{source_01.channel.SubEnabled}})
    iHost_sub_wave      = _source_01_module_get:i(ii, {{source_01.channel.SubWave}})
    kHost_sub_amp       = _source_01_module_get:k(ii, {{source_01.channel.SubAmp}})

    kNoteNumber init notnum()

    if (kHost_enabled_1 == {{true}}) then
        kNoteNumber_1 = kNoteNumber + kHost_fine_1 / 100
        aOut += _source_01_module_audio_generator(kHost_mix, cpsmidinn(kNoteNumber_1), iHost_wave_1, kHost_pulseWidth_1)
        ; {{LogDebug_k '("kHost_mix = %f", kHost_mix)'}}
        ; {{LogDebug_k '("kNoteNumber_1 = %f", kNoteNumber_1)'}}
        ; {{LogDebug_i '("iHost_wave_1 = %f", iHost_wave_1)'}}
        ; {{LogDebug_k '("kHost_pulseWidth_1 = %f", kHost_pulseWidth_1)'}}
    endif

    if (kHost_enabled_2 == {{true}}) then
        kNoteNumber_2 = kNoteNumber + kHost_semi_2 + kHost_fine_2 / 100
        aOut += _source_01_module_audio_generator(k(1) - kHost_mix, cpsmidinn(kNoteNumber_2), iHost_wave_2, kHost_pulseWidth_2)
        ; {{LogDebug_k '("kHost_mix = %f", kHost_mix)'}}
        ; {{LogDebug_k '("kNoteNumber_2 = %f", kNoteNumber_2)'}}
        ; {{LogDebug_i '("iHost_wave_2 = %f", iHost_wave_2)'}}
        ; {{LogDebug_k '("kHost_pulseWidth_2 = %f", kHost_pulseWidth_2)'}}
    endif

    if (kHost_sub_enabled == {{true}}) then
        if (iHost_sub_wave == {{source_01.sub.wave.Pulse}}) then
            iMode_sub = {{vco2.mode.SquareWaveNoPWM}}
        elseif (iHost_sub_wave == {{source_01.sub.wave.Triangle}}) then
            iMode_sub = {{vco2.mode.TriangleNoRamp}}
        endif
        aOut += vco2(kHost_sub_amp, cpsmidinn(kNoteNumber - 12), iMode_sub)
        ; {{LogDebug_i '("iMode_sub = %f", iMode_sub)'}}
    endif

end:
    xout(aOut * kHost_main_amp * 0.1)
endop


/// Always-on instrument for the `source_01` module.
/// @param 4 Channel prefix used for host automation parameters. Should match the channel prefix used for the `AF_source_01_module` opcode.
///
instr AF_source_01_module
    SChannelPrefix = p4

    if (frac(p1) == 0) then
        iModuleInstanceIndex = gi_source_01_module_instance_count
        gi_source_01_module_instance_count += 1

        // Initialize the channel array using the channel object keys declared in source-01.ui.json.
        SChannelSuffixes[] = fillarray({{eval '(asStrings(Object.keys(constants.source_01.channel)))'}})

        // Grow the global channels array if needed.
        if (lenarray:i(gS_source_01_module_channels) < gi_source_01_module_instance_count) then
            S_source_01_module_channels[][] init gi_source_01_module_instance_count, lenarray(SChannelSuffixes)
            ii = 0
            until (ii == iModuleInstanceIndex) do
                ij = 0
                until (ij == lenarray(SChannelSuffixes)) do
                    S_source_01_module_channels[ii][ij] = gS_source_01_module_channels[ii][ij]
                    ij += 1
                od
                ii += 1
            od

            SChannel = strcat(SChannelPrefix, "_")
            ii = 0
            until (ii == lenarray(SChannelSuffixes)) do
                S_source_01_module_channels[iModuleInstanceIndex][ii] = strcat(SChannel, SChannelSuffixes[ii])
                ii += 1
            od

            gS_source_01_module_channels = S_source_01_module_channels
        else
            SChannel = strcat(SChannelPrefix, "_")
            ii = 0
            until (ii == lenarray(SChannelSuffixes)) do
                gS_source_01_module_channels[iModuleInstanceIndex][ii] = strcat(SChannel, SChannelSuffixes[ii])
                ii += 1
            od
        endif

        // Set the instance index channel value for the module's UDO.
        {{setHostValue}}(SChannelPrefix, iModuleInstanceIndex)

        // Retrigger this instrument with a fractional instrument number so it doesn't get turned off if another
        // instance of this instrument is started with a non-fractional instrument number.
        {{LogTrace_i '("Retriggering instrument %d with channel prefix \"%s\" ...", p1, SChannelPrefix)'}}
        {{LogDebug_i '("i%d.%d 0 -1 \"%s\"", p1, gi_source_01_module_instance_count, SChannelPrefix)'}}
        scoreline_i(sprintf("i%d.%d 0 -1 \"%s\"", p1, gi_source_01_module_instance_count, SChannelPrefix))
        turnoff()
        goto end
    endif

    ; {{LogTrace_k '("Running %d with channel prefix \"%s\" ...", p1, SChannelPrefix)'}}

    kLast_wave_1        init 0
    kLast_wave_2        init 0
    kLast_pulseWidth_1  init 0
    kLast_pulseWidth_2  init 0
    kLast_fine_1        init 0
    kLast_fine_2        init 0

    ii = {{getHostValue}}:i(SChannelPrefix)

    if (_source_01_module_get:k(ii, {{source_01.channel.Osc2Link}}) == {{true}}) then
        kHost_wave_1        = _source_01_module_get:k(ii, {{source_01.channel.Osc1Wave}})
        kHost_wave_2        = _source_01_module_get:k(ii, {{source_01.channel.Osc2Wave}})
        kHost_pulseWidth_1  = _source_01_module_get:k(ii, {{source_01.channel.Osc1PulseWidth}})
        kHost_pulseWidth_2  = _source_01_module_get:k(ii, {{source_01.channel.Osc2PulseWidth}})
        kHost_fine_1        = _source_01_module_get:k(ii, {{source_01.channel.Osc1Fine}})
        kHost_fine_2        = _source_01_module_get:k(ii, {{source_01.channel.Osc2Fine}})

        if (kHost_wave_1 != kLast_wave_1) then
            kHost_wave_2 = kHost_wave_1
            _source_01_module_set(ii, {{source_01.channel.Osc2Wave}}, kHost_wave_2)
        elseif (kHost_wave_2 != kLast_wave_2) then
            kHost_wave_1 = kHost_wave_2
            _source_01_module_set(ii, {{source_01.channel.Osc1Wave}}, kHost_wave_1)
        endif

        if (kHost_pulseWidth_1 != kLast_pulseWidth_1) then
            kHost_pulseWidth_2 = kHost_pulseWidth_1
            _source_01_module_set(ii, {{source_01.channel.Osc2PulseWidth}}, kHost_pulseWidth_2)
        elseif (kHost_pulseWidth_2 != kLast_pulseWidth_2) then
            kHost_pulseWidth_1 = kHost_pulseWidth_2
            _source_01_module_set(ii, {{source_01.channel.Osc1PulseWidth}}, kHost_pulseWidth_1)
        endif

        if (kHost_fine_1 != kLast_fine_1) then
            kHost_fine_2 = -kHost_fine_1
            _source_01_module_set(ii, {{source_01.channel.Osc2Fine}}, kHost_fine_2)
        elseif (kHost_fine_2 != kLast_fine_2) then
            kHost_fine_1 = -kHost_fine_2
            _source_01_module_set(ii, {{source_01.channel.Osc1Fine}}, kHost_fine_1)
        endif

        kLast_wave_1 = kHost_wave_1
        kLast_wave_2 = kHost_wave_2
        kLast_pulseWidth_1 = kHost_pulseWidth_1
        kLast_pulseWidth_2 = kHost_pulseWidth_2
        kLast_fine_1 = kHost_fine_1
        kLast_fine_2 = kHost_fine_2
    endif
end:
endin
