/*
 *  source-a.orc
 *
 *  Audio source module with two oscillators and a sub-oscillator.
 *
 *  The `poscil3` opcode is used for sine waves and the `vco2` opcode is used for other waveforms.
 */

{{DeclareModule 'Source_A' '{ "hasAlwaysOnInstrument": "true" }'}}

{{#with Source_A}}


/// @internal
opcode {{Module_private}}_audio_generator, a, kkik
    k_amp, k_cps, i_mode, k_pulseWidth xin

    if (i_mode == {{Osc.Wave.Sine}}) then
        a_out = poscil3(k_amp, k_cps)
    else
        i_vco2_mode = \
            i_mode == {{Osc.Wave.Saw}} ? {{../vco2.Mode.Sawtooth}} : \
            i_mode == {{Osc.Wave.Pulse}} ? {{../vco2.Mode.Square}} : \
            i_mode == {{Osc.Wave.Triangle}} ? {{../vco2.Mode.SawtoothTriangleRamp}} : \
            -1
        a_out = vco2(k_amp, k_cps, i_vco2_mode, k_pulseWidth)
    endif

    xout(a_out)
endop


/// Generates audio using two oscillators and a sub-oscillator.
/// The `poscil3` opcode is used for sine waves and the `vco2` opcode is used for other waveforms.
/// @param 1 Channel prefix used for host automation parameters.
/// @out Mono audio signal generated by the oscillators.
///
opcode {{Module_public}}, a, Sk
    S_channelPrefix, k_noteNumber xin
    i_instanceIndex = {{hostValueGet}}:i(S_channelPrefix)

    a_out = 0

    if ({{moduleGet:k 'Enabled'}} == $false) then
        kgoto end
    endif

    k_hostMainAmp           = {{moduleGet:k 'MainAmp'}}

    k_hostOsc1Enabled       = {{moduleGet:k 'Osc1Enabled'}}
    i_hostOsc1Wave          = {{moduleGet:i 'Osc1Wave'}}
    k_hostOsc1PulseWidth    = {{moduleGet:k 'Osc1PulseWidth'}}
    k_hostOsc1Semi          = {{moduleGet:k 'Osc1Semi'}}
    k_hostOsc1Fine          = {{moduleGet:k 'Osc1Fine'}}

    k_hostOscMix            = {{moduleGet:k 'OscMix'}}

    k_hostOsc2Enabled       = {{moduleGet:k 'Osc2Enabled'}}
    i_hostOsc2Wave          = {{moduleGet:i 'Osc2Wave'}}
    k_hostOsc2PulseWidth    = {{moduleGet:k 'Osc2PulseWidth'}}
    k_hostOsc2Semi          = {{moduleGet:k 'Osc2Semi'}}
    k_hostOsc2Fine          = {{moduleGet:k 'Osc2Fine'}}

    k_hostSubEnabled        = {{moduleGet:k 'SubEnabled'}}
    i_hostSubWave           = {{moduleGet:i 'SubWave'}}
    k_hostSubAmp            = {{moduleGet:k 'SubAmp'}}

    if (k_hostOsc1Enabled == $true) then
        k_osc1NoteNumber = k_noteNumber + k_hostOsc1Semi + k_hostOsc1Fine / 100
        a_out += {{Module_private}}_audio_generator(k_hostOscMix, cpsmidinn(k_osc1NoteNumber), i_hostOsc1Wave, k_hostOsc1PulseWidth)
    endif

    if (k_hostOsc2Enabled == $true) then
        k_osc2NoteNumber = k_noteNumber + k_hostOsc2Semi + k_hostOsc2Fine / 100
        a_out += {{Module_private}}_audio_generator(k(1) - k_hostOscMix, cpsmidinn(k_osc2NoteNumber), i_hostOsc2Wave, k_hostOsc2PulseWidth)
    endif

    if (k_hostSubEnabled == $true) then
        if (i_hostSubWave == {{Sub.Wave.Pulse}}) then
            i_vco2_mode = {{../vco2.Mode.SquareWaveNoPWM}}
        elseif (i_hostSubWave == {{Sub.Wave.Triangle}}) then
            i_vco2_mode = {{../vco2.Mode.TriangleNoRamp}}
        endif
        a_out += vco2(k_hostSubAmp, cpsmidinn(k_noteNumber - 12), i_vco2_mode)
    endif

end:
    xout(a_out * k_hostMainAmp * 0.1)
endop


/// Always-on instrument for this module.
/// @param 4 Channel prefix used for host automation parameters. Should match the channel prefix used for the module's UDO.
///
instr {{Module_private}}_alwayson
    S_channelPrefix = p4
    i_instanceIndex = {{hostValueGet}}:i(S_channelPrefix)

    k_lastHostOsc1Wave          init 0
    k_lastHostOsc2Wave          init 0
    k_lastHostOsc1PulseWidth    init 0
    k_lastHostOsc2PulseWidth    init 0
    k_lastHostOsc1Fine          init 0
    k_lastHostOsc2Fine          init 0


    if ({{moduleGetHost:k 'Osc2Link'}} == $true) then
        k_hostOsc1Wave          = {{moduleGetHost:k 'Osc1Wave'}}
        k_hostOsc2Wave          = {{moduleGetHost:k 'Osc2Wave'}}
        k_hostOsc1PulseWidth    = {{moduleGetHost:k 'Osc1PulseWidth'}}
        k_hostOsc2PulseWidth    = {{moduleGetHost:k 'Osc2PulseWidth'}}
        k_hostOsc1Fine          = {{moduleGetHost:k 'Osc1Fine'}}
        k_hostOsc2Fine          = {{moduleGetHost:k 'Osc2Fine'}}

        if (k_hostOsc1Wave != k_lastHostOsc1Wave) then
            k_hostOsc2Wave = k_hostOsc1Wave
            {{moduleSet:k 'Osc2Wave' 'k_hostOsc2Wave'}}
        elseif (k_hostOsc2Wave != k_lastHostOsc2Wave) then
            k_hostOsc1Wave = k_hostOsc2Wave
            {{moduleSet:k 'Osc1Wave' 'k_hostOsc1Wave'}}
        endif

        if (k_hostOsc1PulseWidth != k_lastHostOsc1PulseWidth) then
            k_hostOsc2PulseWidth = k_hostOsc1PulseWidth
            {{moduleSet:k 'Osc2PulseWidth' 'k_hostOsc2PulseWidth'}}
        elseif (k_hostOsc2PulseWidth != k_lastHostOsc2PulseWidth) then
            k_hostOsc1PulseWidth = k_hostOsc2PulseWidth
            {{moduleSet:k 'Osc1PulseWidth' 'k_hostOsc1PulseWidth'}}
        endif

        if (k_hostOsc1Fine != k_lastHostOsc1Fine) then
            k_hostOsc2Fine = -k_hostOsc1Fine
            {{moduleSet:k 'Osc2Fine' 'k_hostOsc2Fine'}}
        elseif (k_hostOsc2Fine != k_lastHostOsc2Fine) then
            k_hostOsc1Fine = -k_hostOsc2Fine
            {{moduleSet:k 'Osc1Fine' 'k_hostOsc1Fine'}}
        endif

        k_lastHostOsc1Wave = k_hostOsc1Wave
        k_lastHostOsc2Wave = k_hostOsc2Wave
        k_lastHostOsc1PulseWidth = k_hostOsc1PulseWidth
        k_lastHostOsc2PulseWidth = k_hostOsc2PulseWidth
        k_lastHostOsc1Fine = k_hostOsc1Fine
        k_lastHostOsc2Fine = k_hostOsc2Fine
    endif
endin


{{/with}}
